// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model sample {
  id String @id
  name String
}

model Customer {
  id String @id
  name String
  email String @unique
  phone String  @unique
  wallet Wallet? //artinya customer bisa memiliki wallet bisa tidak
  comment Comment[] //relasi one to Many, satu customer dapat memiliki banyak commet, maka itu menggunakan []
  likes Like[] 

  @@map("customers") //nama model Customer, berikan @@map agar jika mau nama tabel berbeda dengan nama model
}

model Comment {
  id Int @id @default(autoincrement())
  title String @db.VarChar(100)
  description String @db.Text
  customer_id String @db.VarChar(100)
  customer Customer @relation(fields: [customer_id], references: [id])

  @@map("comments")
}


model Wallet {
  id String @id @db.VarChar(100)
  balance Int @db.Int
  customer_id String @unique @db.VarChar(100)
  customer Customer @relation(fields: [customer_id], references: [id])

  @@map("wallet")
}

model Product{
  id String @id
  name String
  price Int
  stock Int
  category String
  likedby Like[]

  @@map("products")
}

model Category{
  id Int @id @default(autoincrement())
  name String @db.VarChar(100)

  @@map("categories")
}

model Like {
  customer_id String @db.VarChar(100)
  product_id String @db.VarChar(100)
  customer Customer @relation(fields: [customer_id], references: [id])
  product Product @relation(fields: [product_id], references: [id])

  @@id([customer_id, product_id])
  @@map("likes")
}


//lakukan seperti dibawah jika koneksi sudah ada di database

// model Kategori {
//   id      Int      @id @default(autoincrement())
//   nama    String
//   produk  Produk[] @relation("KategoriProduk") //tanda [] artinya one to many, 1 kategori dapat diisi beberapa produk
// }

// model Produk {
//   id          Int      @id @default(autoincrement())
//   nama        String
//   kategoriId  Int
//   kategori    Kategori @relation("KategoriProduk", fields: [kategoriId], references: [id])
// }